{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Page/index.js","pages/Home.js","pages/NotFoundPage.js","serviceWorker.js","store.js","index.js","router.js"],"names":["Header","react_default","a","createElement","Footer","Page","_ref","title","children","react","Helmet","charSet","Home","components_Page","NotFoundPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","e","history","createHistory","store","rootReducer","combineReducers","router","routerReducer","enhancer","applyMiddleware","routerMiddleware","thunkMiddleware","createStore","configureStore","ReactDOM","render","es","BrowserRouter","Switch","Route","exact","path","component","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iNAEeA,EAAA,kBACXC,EAAAC,EAAAC,cAAA,sBCDWC,EAAA,kBACXH,EAAAC,EAAAC,cAAA,sBCgBWE,EAZF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,SAAV,OACXP,EAAAC,EAAAC,cAACM,EAAA,SAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,OAAD,KACIT,EAAAC,EAAAC,cAAA,QAAMQ,QAAQ,UACdV,EAAAC,EAAAC,cAAA,aAAQI,IAEZN,EAAAC,EAAAC,cAACH,EAAD,MACMQ,EACNP,EAAAC,EAAAC,cAACC,EAAD,QCZWQ,EAAA,kBACXX,EAAAC,EAAAC,cAACU,EAAD,CAAMN,MAAM,iGAAZ,SCDWO,EAAA,kBACXb,EAAAC,EAAAC,cAACU,EAAD,CAAMN,MAAM,0DAAZ,QCQEQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,iDC3F3DC,EAAe,GAGfC,EACc,kBAAXzB,QACPA,OAAO0B,qCACL1B,OAAO0B,qCAAqC,IAEvC,SAAAC,GAAC,OAAIA,GAEDC,EAAUC,MCJjBC,EDMiB,WACrB,IAAMC,EAAcC,YAAgB,CAClCC,OAAQC,kBAGJC,EAAWV,EAAiBW,YAChCC,2BAAiBT,GACjBU,MAGF,OAAOC,YAAYR,EAAaP,EAAcW,GChBlCK,GAEdC,IAASC,OACP1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAUb,MAAQA,GAChB9C,EAAAC,EAAAC,cCRW,kBACXF,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACE5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYtD,IAClCX,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAOG,UAAYpD,ODIvB,OACWqD,SAASC,eAAe,SFMhC,SAAkB7C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6C,IAAIC,YAAwBrD,OAAOC,SAASqD,MACpDC,SAAWvD,OAAOC,SAASsD,OAIvC,OAGFvD,OAAOwD,iBAAiB,OAAQ,WAC9B,IAAMnD,EAAK,GAAAoD,OAAMJ,YAAN,sBAEPvD,GAgEV,SAAiCO,EAAOC,GAEtCoD,MAAMrD,GACHK,KAAK,SAAAiD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CzD,UAAUC,cAAcyD,MAAMvD,KAAK,SAAAC,GACjCA,EAAauD,aAAaxD,KAAK,WAC7BV,OAAOC,SAASkE,aAKpB/D,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAiD,CAAwB/D,EAAOC,GAI/BC,UAAUC,cAAcyD,MAAMvD,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,ME7B/BE","file":"static/js/main.b15e708a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default () => (\n    <div>Header</div>\n)","import React from 'react'\n\nexport default () => (\n    <div>Footer</div>\n)","import React, { Fragment } from 'react';\n\nimport { Helmet } from 'react-helmet';\n\nimport Header from '../Header'\nimport Footer from '../Footer'\n\nconst Page = ({ title, children }) => (\n  <Fragment>\n    <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>{title}</title>\n    </Helmet>\n    <Header />\n        { children }\n    <Footer />\n  </Fragment>\n)\n\nexport default Page;\n","import React from 'react'\nimport Page from '../components/Page'\n\nexport default () => (\n    <Page title=\"Обучалка - Главная\" >\n        Home\n    </Page>\n)","import React from 'react'\nimport Page from '../components/Page'\n\nexport default () => (\n    <Page title=\"Обучалка - 404\" >\n        404\n    </Page>\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { routerReducer, routerMiddleware } from 'react-router-redux';\nimport createHistory from 'history/createBrowserHistory';\n\nconst initialState = {};\n\n// Redux DevTools extension code\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : e => e;\n\nexport const history = createHistory();\n\nconst configureStore = () => {\n  const rootReducer = combineReducers({\n    router: routerReducer,\n  });\n\n  const enhancer = composeEnhancers(applyMiddleware(\n    routerMiddleware(history),\n    thunkMiddleware,\n  ));\n\n  return createStore(rootReducer, initialState, enhancer);\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport Router from './router'\n\nimport * as serviceWorker from './serviceWorker';\n\nimport configureStore from './store';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={ store }>\n    <Router />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from 'react';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport NotFoundPage from './pages/NotFoundPage';\n\nexport default () => (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={ Home } />\n        <Route component={ NotFoundPage } />\n      </Switch>\n    </Router>\n);\n"],"sourceRoot":""}